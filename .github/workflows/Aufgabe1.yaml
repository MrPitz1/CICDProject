name: Aufgabe1

on:
  push:
    branches: ["main"]
  pull_request:
    types:
      - opened
    branches: ["main"]

jobs:
  unit_tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout_code
        uses: actions/checkout@v4

      - name: install_go
        run: sudo apt install golang-go

      - name: build
        if: github.actor != 'dependabot[bot]' 
        run: |
          cd frontend
          npm ci
          npx ng build
          cp -r dist/frontend/browser ../backend/cmd/strichliste/frontendDist

      - name: run_tests
        if: github.actor != 'dependabot[bot]' # Skip this step if the actor is Dependabot
        run: |
          cd backend
          go test ./... -coverprofile=coverage.out && go tool cover -html=coverage.out -o coverage.html

  check_format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout_code
        uses: actions/checkout@v4

      - name: apply_code_format
        run: |
          gofmt -w ./backend
          cd frontend; npx prettier --write .

      - name: check_code_format
        run: |
          gofmt -l ./backend
          cd frontend; npx prettier --check .

      - name: check_code_format_in_CI_pipeline
        if: github.actor != 'dependabot[bot]' # Skip this step if the actor is Dependabot
        run: |
          files=$(gofmt -l ./backend) && [ -z "$files" ]

  build_and_push_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # Run only on push to main, not for PRs or Dependabot
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build Docker image
        run: docker build -t ghcr.io/mrpitz1/cicdproject:latest .

      - name: Run smoke tests
        run: |
          docker run -d --name cicdproject_test -p 8080:8080 ghcr.io/mrpitz1/cicdproject:latest
          sleep 10 
          cd ./backend/cmd/smoketest/
          go run ./
          docker stop cicdproject_test
          docker rm cicdproject_test
          
      - name: Push Docker image
        run: docker push ghcr.io/mrpitz1/cicdproject:latest